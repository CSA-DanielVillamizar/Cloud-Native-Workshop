name: 0 Deploy PoC Env V3

on:
  workflow_dispatch:
  
env:
  image_name: oapi
  tag: ${{ github.run_number }} 
  acr_name: oacr0${{ github.run_number }}
  LOG_ANALYTICS: OALogs

jobs:
  create-resource-group:
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure RG
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az group create --location ${{ secrets.AZURE_REGION }} --name ${{ secrets.AZURE_RG }}
          
  create-acr:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs: create-resource-group
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create ACR
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az acr create --resource-group ${{ secrets.AZURE_RG }} --name ${{ env.acr_name }} --sku Basic    

  build-and-push-image:
    runs-on: ubuntu-latest
    environment:
      name: ACR  
    if: ${{ success() }}
    needs: [deploy-aks,create-acr]
    steps:
  
       - uses: actions/checkout@main
       - name: Azure Login
         uses: azure/login@v1
         with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}
           
       - name: Build and Push Image
         uses: Azure/cli@v1
         with:
           inlineScript: |
             az acr build -t ${{ env.acr_name }}.azurecr.io/${{ env.image_name }}:${{ env.tag }} -r ${{ env.acr_name }} .
             
  deploy-aks:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs: [create-acr]
    steps:
     - uses: actions/checkout@main
     - name: Azure Login
       uses: azure/login@v1
       with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
           
       - name: Build and Push Image
         uses: Azure/cli@v1
         with:
           inlineScript: |
             WORKSPACE_ID=$(az resource show --resource-type Microsoft.OperationalInsights/workspaces --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.LOG_ANALYTICS }} --query "id" -o tsv)
             az aks create --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.CLUSTER_NAME }} --node-count 2 --enable-addons monitoring --workspace-resource-id  $WORKSPACE_ID --enable-cluster-autoscaler --min-count 2 --max-count 10 --attach-acr ${{ env.acr_name }} --generate-ssh-keys --yes
             
  deploy-microservice:
    runs-on: ubuntu-latest
    environment:
      name: PoC
    if: ${{ success() }}
    needs: [build-and-push-image]
    steps:
    - uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ secrets.CLUSTER_NAME }}
        resource-group: ${{ secrets.AZURE_RG }}
    
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3
      with:
        version: latest
    
    - name: Deploy Microservice
      run: |
          kubectl create ns api
          kubectl create deploy api --image=${{ env.acr_name }}.azurecr.io/${{ env.image_name }}:${{ env.tag }} -n api
          kubectl expose deployment api --type=LoadBalancer --name=api --port=80 --target-port=7999 -n api
          kubectl autoscale deployment api --cpu-percent=30 --min=3 --max=100 -n api
          
  create-issue:
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs: [deploy-microservice]
    steps:
      - name: create-issue
        uses: oaviles/issue_action@v1
        with:
          issue-title: "Deployment Failure: PoC Env - ${{ github.sha }}"
          issue-body: "Validate orchestration workflow"
          repo-token: ${{secrets.GITHUB_TOKEN}}       
          
